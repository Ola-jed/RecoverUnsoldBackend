@using RecoverUnsoldAdmin.Services
@inherits LayoutComponentBase
@inject ThemeService ThemeService

<MudThemeProvider Theme="ThemeService.Theme()"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <CascadingAuthenticationState>
        <AuthorizeView>
            <Authorized>
                <MudAppBar>
                    <MudIconButton Icon="@_menuIcon" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(_ => DrawerToggle())"/>
                    @StringLocalizer["Dashboard"]
                    <MudSpacer/>
                    <div style="display: flex;align-items: center">
                        <MudToggleIconButton Toggled="ThemeService.IsDarkMode" ToggledChanged="ThemeService.ToggleDarkMode"
                                             Color="@Color.Primary" ToggledColor="@Color.Primary"
                                             ToggledIcon="@Icons.Filled.LightMode" ToggledTitle="@(StringLocalizer["LightTheme"])"
                                             Icon="@Icons.Filled.DarkMode" Title="@(StringLocalizer["DarkTheme"])"/>
                        <CultureSwitcher/>
                    </div>
                </MudAppBar>
                <MudDrawer @bind-Open="@_drawerOpen" Variant="@DrawerVariant.Mini">
                    <NavMenu/>
                </MudDrawer>
                <MudMainContent>
                    @Body
                </MudMainContent>

                <MudScrollToTop>
                    <MudFab Color="Color.Primary" Icon="@Icons.Filled.KeyboardArrowUp"/>
                </MudScrollToTop>
            </Authorized>

            <NotAuthorized>
                <LoginRedirect />
            </NotAuthorized>
        </AuthorizeView>
    </CascadingAuthenticationState>
</MudLayout>

@code {

    [Inject]
    private IStringLocalizer<App> StringLocalizer { get; set; } = default!;

    bool _drawerOpen;
    string _menuIcon = Icons.Filled.Menu;

    void DrawerToggle() {
        _drawerOpen = !_drawerOpen;
        _menuIcon = _drawerOpen ? Icons.Filled.MenuOpen : Icons.Filled.Menu;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await ThemeService.LoadTheme();
        StateHasChanged();
    }

}